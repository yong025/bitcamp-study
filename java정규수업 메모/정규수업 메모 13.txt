문장 전체선택  - 오른쪽 클릭 - refactor - extract method하면 메소드 생성

GRASP 객체지향 설계기법

(클래스에 역할을 잘 부여하는 방법=재사용 및 유지보수가 매우 쉬운 클래스를 만드는 법)
Gerneral (일반적인 설계에서 적용할 수 있는)
Responsibility (책임, 역할)
Asignment (할당, 배정)
Software 
Pattern (경험적으로 검증된 방법 유형)

규칙
1.High Cohesion(높은 응집력) - 한 클래스는 한 역할 
2.Low Coupling(연결도를 적게) - 다른 클래스와의 접점을 줄인다.
3.InFormation Expert - 정보를 갖고 있는 자가 직접 그 정보를다루게 한다.



클래스 - 특정 역할을 수행하는 코드가 들어있다. ex. 핸드폰
메서드 - 역할을 수행하는데 필요한 기능을 정의하고 있다. ex. 전화걸기,메세지 보내기
ex.
ArrayList(데이터 목록관리)
-append(기능:데이터 추가)
-retrieve
-toArray
-remove(기능:데이터 삭제)

String.split()
"100 * 3" >> split(" ") >> /"100"//"*"//"3"/ 을 배열로 나누어줌

인터페이스(매개체, 규칙) 

ex. APP >> BoardHandler(execute())
            MemberHandler(service())
            ComputeHandler(ohora())
메뉴를 처리하기 위해 핸들러의 코드를 실행하는데 그 사용법(호출하는 메서드) 다 다르다.
=> 프로그래밍의 일관성이 없다. =>유지보수 불편
**클래스를 작성할 때 메서드의 시그니처를 강제로 고정하기 = 메서드명+파라미터+리턴타입
ex. APP >> BoardHandler(execute()) >> interface(Handler. execute())로 통일
            MemberHandler(service())
            ComputeHandler(ohora())

인터페이스의 역할

caller(호출자) >> 메서드 >> callee(피호출자)
**인터페이스 = 호출자와 피호출자 사이의 호출 규칙**

caller개발자 = 호출 규칙에 맞춰서 일관성 있는 사용이 가능
callee개발자 = 규칙에 따라 일관된 개발 가능 => 호출자에 영향을 받지 않는다.
규칙을 생성하면 호출 개발자와 피호출 개발자가 서로 의존하지 않고 개발 가능하다

인터페이스 정의와 구현

인터페이스 << 클래스
인터페이스 - 메서드 규칙정의
클래스 - 메서드를 구현 
