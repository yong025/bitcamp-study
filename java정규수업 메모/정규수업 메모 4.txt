java 파일과 .class 파일

- .class파일은 소스파일 제목이 아닌  내부 클래스 블럭명으로 이름이 생성.
(비공개 클래스라면 소스파일과 클래스명이 달라도 됨.)
- public 클래스처럼 공개된 클래스는 꼭  첫번째 클래스명이 소스파일명과 동일해야 함.
(public클래스가 한개 이상 들어가면 컴파일 오류.)

>>소스파일명과 클래스 파일명을 같게 만든다.( 예외적인 위험요소를 줄인다.)
만약 다르다면 유지보수 때, 소스파일을 찾기가 어려움.
>>한 소스파일에 가능한 한 클래스를 두는게 유지보수에 용이함.(소스파일 찾기가 쉬움.)
>>클래스 패키지와 같은 경로에 소스파일을 보관한다.

자바 주석

//한줄 주석
/*  ---  */ 여러줄 주석
/**  ---  */ javadoc 주석 >>개발자가 보는 문서를 만들 때 사용하는 주석

javadoc 주석
ex.
/** -- */
class Hello {
/** -- */
int a ;
/** -- */

javadoc.exe 생성 >> HTML문서로 생성
//     javadoc 
//       -encoding [소스 파일의 문자집합]
//       -charset [생성될 HTML 파일의 문자집합]
//       -d [생성된 파일을 놓아둘 디렉토리] 
//       -sourcepath [자바 소스 경로] [자바 패키지]
경로설정ex.
javadoc -encoding utf-8 -charset utf-8 -d doc -sourcepath app/src/main/java com.eomcs.lang.ex02

Literal (리터럴) -값을 표현하는 문법
정수: 100과 100L(정수는 대문자L을 많이씀)
4byte 정수리터럴 100: 약 -21억 ~ 21억
8byte 정수리터럴 100L(long): 약 -900경 ~ 900경

부동소수점(실수) 3.14와 3.14f(실수는 소문자f를 많이씀)
4byte 부동소수점리터럴 3.14 : 약 15자리(전체 숫자개수)까지 표현
8byte 부동소수점리터럴 3.14f: 약 17자리로 소수점 표현
 ex. 3.141592f
문자(한개의 문자) 
2byte 문자리터럴 (utf-16(ucs2))
 'A' '가' 
논리값
4byte 논리값 리터럴
 true, false (소문자)
null (주소 없음)
문자열
 "ABC가각간"

10진수/8진수/2진수/16진수(* CS50)참고

2진수
0110 0101 = 101
128 64 32 16 8 4 2 1(2의 배수)
64 + 32 + 4 + 1 = 101
(덧셈에 포함되지 않는 숫자는 0 포함되는 숫자는 1)

Data 저장

갑 >> 변환 >> 2진수 >> 저장 >> H/W
정수 >> 01100101 >> H/W
부동소수점 >>IEEE >> 01100101 >> H/W
문자 >> characterset: EUC-KR, 조합형, ms-949, unicode, utf-8 >> 01111110 >> H/W
논리 >> 0000101001 >> H/W
빛 >> RGB >> RED GREEN BLUE 빛의 세기 >> 정수 >> 2진수 >> H/W
소리 >> sampling (Hz) >> 0011010001 >> H/W

정수의 2진수 표현(부동소수점의 가수부를 저장할 때)
1.sign-magnitude
24
+24 : 0001 1000
-24 : 1001 1000

2. 1의 보수(결과값에 임의로 +1을 꼭 해줘야함)
24
+24 : 0001 1000
-24 : 1110 0111 

3. 2의 보수(대부분 컴퓨터에서 정수는 2의 보수사용)
+24 : 0001 1000
-24 : 1110 1000

4. Excess-k (k값 초과)(부동소수점의 지수부를 저장할 때)
+24 : 128(k값) + 24 = 152 = 10011000
-24 : 128(k값) + -24 = 104 = 01101000

램 크기와 데이터 크기의 연관관계

*RAM 용량
APP >> 실행 >>사용자가 입력한 값을 임시보관/중간 실행경과 임시보관/출력할 결과 임시보관

메모리 크기와 Data크기

1bit = 2
2bit = 4
3bit = 8

문자 리터럴 
'A' >> 변환 (규칭: ASCII(characterset 코드표)) >> 100 0001(ASCII는 7비트 표현)

characterset 코드표

1. ASCII (7bit-128자) 불어, 독어 등에 대해서는 코드(2진수)가 정의되어 있지 않다.
A >> 100 0001
B >> 100 0010

2. ISO-8859 (8bit-256자) 한글, 중국어 등에 대해 코드값이 정의되어 있지 않다. 
ASCII + 유럽문자

3. EUC-KR (16bit-2350자) 현재 유통되는 한글음절을 모두 포함하고 있지 않다.

4. 조합형 (16bit) (한글의 모든 글자 표현가능 단, 국제 표준이 아니다.(아레아 한글만 가능))

5.MS949(CP949) (16bit-11172자) 기존의 EUC-KR 코드에 추가했기 때문에 기존 문서와 100% 호환가능
EUC-KR +@ (국제표준 아니다.(윈도우에서만 사용가능))

6. 유니코드 (1~4byte)
UCS2(UTF-16) - 모든문자 2byte로 표현 / ***Java에서 문자를 다룰 때, 사용***

7. 유니코드 (UTF-8) (1~4byte)
unicode 문자 중에서 8bit로 표현가능한 것은 그대로 8bit로 표현하고 기타 문자는 변형 규칙에 따라 2~4byte문자로 변환한다.
Unicode Transformation Format

줄바꿈 코드
Windows: 0D(Carrage Return)0A(Line Feed)
Unix/Linux: 0A(Line Feed)




