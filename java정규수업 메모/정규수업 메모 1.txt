실행파일과 운영체제 

notepad.exe >>> windows
실행파일에 들어있는 명령어는 특정 CPU와 OS에서 인식할 수 있다.
//소스파일을 컴파일할 때 각각 실행하도록 변환하기 때문.

*컴파일 실행파일과 CPU

소스파일 >>컴파일>>기계어 실행파일>>CPU
ex.
소스파일>>인텔 CPU컴파일러>>인텔 CPU명령어>>인텔 CPU
소스파일>>ARM CPU컴파일러>>ARM CPU명령어>>ARM

모든 OS가 구성 방식이 모두 다르기때문에 각각 다르게 만들어야한다.

같은 CPU를 사용해도 다른 운영체제 일때 컴파일 조건
-windows 형식에 맞춰서 인텔 CPU명령으로 변환해주는 컴파일러
-linux os 형식에 맞춰서 인텔 CPU명령으로 변환해주는 컴파일러

반대로 운영체제가 같아도 CPU가 다르면 실행할 수 없다.

컴파일(C 언어) / 인터프리터 /자바의 하이브리드

컴파일 ** gcc -o hello.exe hello.c(a.exe를 hello.exe로 바꿔주는 명령어)
-hello.c >>컴파일>>hello.exe(진짜 기계어(cpu명령어+os구성))>>실행
-실행시 별도의 S/W필요없음
-CPU와 OS에 맞춰 변환했기 때문에 다른 CPU / OS에서 실행할 수 없다.
-진짜 기계어>>실행속도 빠름.

인터프리터 ** node hello.js(자바스크립트 엔진(인터프리터)의 도움을 받아 실행)
-hello.js>>loading>>node js.exe(자바스크립트 엔진)>>실행
-실행시 소스파일을 읽어서 처리할 인터프리터가 있어야 한다.
-실행시 소스파일이 있어야 함
-매번 소스파일을 읽고 문법을 검사하기 때문에 실행속도가 느리다.
-인터프리터방식은 운영체제 상관없이 인터프리터가 있다면 소스파일로 실행가능
(OS나 CPU에 종속되지 않는다.)

자바 (하이브리드)
-Hello.java>>컴파일(javac Hello.java)>>Hello.class(bytecode(가상의 기계어>>직접실행불가))>>실행
-bytecode 인터프리터 필요 (java.exe(JVM))
-컴파일 할 때 문법검사 완료로 실행시 일반 인터프리터방식보다 속도가 빠르다.
(컴파일 방식 > 하이브리드 방식 > 인터프리터 방식)

JIT 컴파일과 AOT 컴파일

Just In Time(JIT):
-실행 시점에(실행속도를 높이기위해) 바이트코드를 navive code(진짜 기계어)로 변환하여 실행
-실행할 때 마다 nativd code로 바꿔야 하기 때문에 실행시간이 연기되는 문제.

Ahead Of Time(AOT)
-프로그램을 설치할 때 native code로 변환(설치 시간이 더 걸린다.)
-실행할 때도 바로 native code를 실행하여 속도가 빠르다.
*Android 5.x 부터 ART JVM사용 >> AOT방식으로 실행
*그 이하 버전은 Dalvik JVM 사용>> JIT 방식으로 실행
 
ex.
play store / app store
app <- byte code로 업로드
다운로드 >> 갤럭시+엑시노스 (모두 CPU가 다르다)
다운로드 >> 갤럭시+스냅드래곤
다운로드 >> xxxx폰+인텔
******다운로드 과정에서 byte code를 CPU별로 변환.

Software Configuration Management System (소프트웨어 형상관리 시스템)
-소스코드의 변화를 관리 / 백업

1. local 형상관리
-프로젝트 >>백업>>local 저장소(Repository)

2. 중앙 집중형 형상관리
-pc에서 프로젝트 백업(check in) >> remote 저장소(Repository) >> 여러pc로 프로젝트 다운로드(check out)
-여러 사람이 프로젝트 공유 / 함께 편집 가능(팀 프로젝트 가능)
-서버에 문제발생>>변경 내역 소실 문제

3. 분산 저장 시스템 (ex. git)
-pc프로젝트 >> local저장소 >> remote 저장소 >> pc 2, 3, 4 ...의 local저장소>>pc 2, 3, 4 ...로 check out
>> pc 2, 3, 4 ...의 작업물 다시 local저장소 백업 >> remote 저장소(push)
-저장소를 local에도 둔다 (분산 저장)
-서버에서 문제 발생해도 로컬 저장소를 다시 서버에 업로드 가능(서버 오류위험 하락)
-변경내역 보존가능

**git 사용***

local >> git client s/w 설치 >> 호스팅 사이트로 요청(github.com)

remote >> git server s/w 설치(직접 구축 X)
(전문적으로 서비스해주는 곳이 github, bitbucket, gitlab..등)

저장소 준비
1. github.com에 저장소 생성(그 다음 github에서 url복사)
2. local pc에 저장소 복제(현 시점에서는 사용자홈 안에 git폴더가 local 자리)
(커맨드창에 cd git 후에 git clone https://github.com/yong025/bitcamp-study.git 입력)
(뒤에 한칸 띄고 폴더명을 정해주면 정한 폴더명으로 변환되어 다운받음)
3.그 다음부터는 폴더에서 git pull하면 최신화

파일 백업&업로드
(git >> bitcamp-study폴더에 hello.c/hello.js/Hello.java 작업물 복사)
1. bitcamp-study/test1.txt 생성
(git clone https://github.com/eomcs/eomcs-docs.git)
2. 백업할 파일의 명단 작성 = (staging area (snapshot) $ git add 파일명
3.백업 명단에 기록한 파일을 로컬 저장소에 보관 $ git commit -m "첫번째 작업"
4.서버에 업로드 $ git push
(누군가 로그인이 되어있으면 제어판 >사용자계정 >윈도우자격증명 >일반자격증명 다 삭제)
(그후 .net framework 설치)
